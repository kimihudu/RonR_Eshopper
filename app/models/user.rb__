class User
  include Mongoid::Document

  attr_accessor :psw
  # attr_accessible :username, :email, :psw, :psw_confir
  EMAIL_REGEX = /([A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4})/
  validates :usrName, presence: true, uniqueness: true, length: { in: 3..20 }
  validates :email, presence: true, uniqueness: true, format: EMAIL_REGEX
  validates :psw, confirmation: true #:psw_confir attr
  validates_length_of :psw, in: 6..20, on: :create

  field :usrName
  field :email, type: String
  field :psw, type: String
  field :psw_confir, type: String
  field :encrypted_pass, type: String
  field :salt, type: String
  # field :role, type: String
  field :admin, type: Boolean
  field :address, type: Hash
  field :cart, type: Hash
  field :wishlist, type: Hash

  before_save :encrypt_password
  after_save :clear_password

  def encrypt_password
    if psw.present?
      self.salt = BCrypt::Engine.generate_salt
      self.encrypted_pass = BCrypt::Engine.hash_secret(psw, salt)
    end
  end

  def clear_password
    self.psw = nil
  end

  def self.authenticate(username_or_email = '', login_password = '')
    user = if EMAIL_REGEX.match(username_or_email)
             User.find_by_email(username_or_email)
           else
             User.find_by_username(username_or_email)
           end

    if user && user.match_password(login_password)
      return user
    else
      return false
    end
end

  def match_password(login_password = '')
    encrypted_password == BCrypt::Engine.hash_secret(login_password, salt)
  end
end
